import random
import numpy as np
from bisect import bisect_left, bisect_right
import cv2 as cv
from PIL import Image

def distance(p1, p2):
    return round((p1[0]-p2[0])**2+(p1[1]-p2[1])**2+(p1[2]-p2[2])**2, 1)

"""
img = cv.imread('star.jpg')
img = cv.cvtColor(img, cv.COLOR_BGR2RGB)"""

pixels = [
(104, 166, 57), (112, 175, 60), (118, 181, 76), (105, 173, 72), (103, 164, 61), (115, 180, 76), (116, 182, 76), (116, 177, 74),
(103, 166, 61), (103, 166, 61), (109, 163, 65), (128, 169, 77), (128, 171, 79), (85, 142, 47), (138, 188, 89), (138, 186, 87), 
(117, 166, 84), (140, 195, 93), (140, 195, 93), (137, 194, 89), (103, 167, 57), (105, 171, 63), (120, 174, 76), (140, 185, 90), 
(125, 177, 77), (127, 182, 88), (120, 177, 70), (112, 161, 69), (119, 163, 76), (100, 161, 57), (123, 154, 76), (116, 183, 77), 
(153, 199, 100), (149, 178, 96), (137, 160, 88), (124, 174, 89), (117, 182, 82), (172, 182, 122), (115, 113, 101), (113, 109, 100), 
(69, 79, 29), (125, 165, 77), (125, 166, 74), (111, 103, 92), (116, 108, 97), (135, 166, 86), (122, 145, 77), (141, 110, 82), 
(146, 109, 82), (117, 86, 57), (118, 109, 92), (120, 103, 93), (146, 106, 80), (121, 85, 53), (181, 132, 100), (177, 130, 100), 
(140, 107, 76), (119, 105, 92), (117, 104, 88), (122, 87, 57), (123, 86, 57), (155, 109, 76), (120, 85, 53), (147, 108, 77), 
(120, 87, 56), (181, 135, 99), (183, 134, 94), (144, 105, 76), (149, 110, 81), (87, 57, 21), (117, 84, 53), (120, 87, 56), 
(120, 87, 56), (179, 135, 100), (177, 134, 100), (120, 85, 53), (121, 85, 53), (148, 127, 126), (185, 133, 93), (183, 132, 101), 
(185, 131, 95), (189, 136, 102), (150, 112, 76), (181, 135, 101), (124, 85, 52), (157, 131, 130), (177, 132, 91), (187, 131, 94), 
(149, 109, 74), (120, 85, 53), (146, 107, 76), (150, 109, 77), (177, 137, 102), (144, 102, 80), (151, 110, 82), (121, 85, 53), 
(151, 109, 87), (150, 103, 75), (124, 85, 52), (122, 87, 57), (144, 105, 74), (153, 112, 82), (149, 105, 76), (177, 134, 92), 
(179, 135, 96), (153, 108, 77), (150, 108, 83), (145, 109, 75), (144, 110, 75), (149, 109, 74), (122, 86, 52), (122, 87, 57), 
(149, 112, 86), (145, 104, 76), (153, 105, 69), (116, 79, 52), (153, 110, 75), (140, 108, 87), (144, 109, 87), (123, 84, 53), 
(151, 110, 78), (149, 110, 79), (142, 105, 76), (120, 85, 57), (124, 87, 61), (147, 108, 75), (149, 108, 76), (122, 87, 57), 
(123, 87, 61), (152, 109, 77), (146, 110, 76), (116, 85, 57), (147, 106, 74), (146, 110, 78), (187, 135, 98), (150, 109, 77), 
(123, 86, 57), (117, 87, 61), (121, 85, 53), (121, 87, 52), (177, 133, 94), 
(186, 135, 92), (183, 128, 87), (187, 135, 98), (146, 112, 77), (153, 110, 78), (150, 109, 77), (189, 133, 86), (177, 136, 104), 
(179, 135, 100), (181, 136, 105), (157, 111, 77), (189, 135, 91), (151, 110, 82), (183, 131, 91), (184, 131, 87), (150, 106, 77),
(149, 132, 122), (146, 112, 85), (126, 85, 53), (150, 106, 69), (144, 107, 80), (121, 103, 93), (120, 102, 90), (157, 109, 69), 
(146, 110, 78), (144, 110, 85), (149, 110, 77), (152, 109, 77), (181, 133, 93), (180, 135, 96), (123, 84, 53), (123, 107, 94), 
(118, 101, 91), (149, 110, 77), (125, 86, 53), (149, 110, 79), (147, 108, 75), (127, 87, 61), (153, 108, 75), (181, 137, 102), 
(179, 135, 100), (181, 137, 100), (149, 110, 79), (146, 112, 85), (146, 105, 75), (177, 133, 96), (120, 86, 61), (131, 86, 53), 
(178, 132, 98), (177, 133, 94), (149, 110, 79), (153, 110, 78), (183, 134, 102), (181, 131, 94), (154, 108, 74), (125, 84, 52), 
(144, 105, 74), (147, 108, 77), (123, 84, 53), (146, 109, 80), (181, 132, 92), (153, 108, 75), (150, 109, 77), (181, 137, 102), 
(155, 110, 77), (157, 113, 74), (185, 138, 96), (177, 135, 97), (153, 108, 75), (151, 110, 80), (120, 85, 47), (122, 84, 45), 
(149, 110, 81), (154, 111, 76), (179, 140, 111), (177, 134, 102), (154, 106, 70), (153, 110, 75), (150, 106, 69), (153, 110, 76),
(149, 109, 74), (153, 109, 72), (150, 110, 75), (121, 86, 56), (127, 86, 56), (124, 85, 52), (146, 106, 80)]
"""pixels = np.array(img)"""
k = 4

calibrated_means = sorted(random.sample(pixels, k))
print("these are the initial random means:", calibrated_means)
actual_means = list(calibrated_means)
prev_means = []

while prev_means!=calibrated_means:
    clusters = [[] for _ in range(k)]
    prev_means=list(calibrated_means)
    for i in pixels:
        # find closest mean of 'i' from 'calibrated_means' and append ''i' into 'clusters'
        dist_list = [[] for _ in range(2)]
        for m in calibrated_means:
            dist_list[0].append(m)
            dist_list[1].append((distance(i, m)))

        print("this is the distance list to each mean from pixel:", dist_list)

        centroid = dist_list[1].index(min(dist_list[1]))
        clusters[centroid].append(i)
    print("clusters:", clusters)
    # calculate_clusters_mean
    for x in range(k):
        clust = np.array(clusters[x])
        actual_means[x] = (np.mean(clust[:,0]), np.mean(clust[:,1]), np.mean(clust[:,2]))
    # update means

    for x in range(k):
        # find closest element of 'list' from 'float_means[x]' and append to means[x]
        calibrated_means[x] = (round(actual_means[x][0]), round(actual_means[x][1]), round(actual_means[x][2]))

print(f'FINISHED\n집단: {clusters} \n이전 집단중심: {prev_means}\n무게중심 좌표: {actual_means}\n새 집단중심: {calibrated_means}')

"""for pixel in pixels:
    pixel = calibrated_means(clusters.index(pixel)[0])

img = Image.fromarray(np.uint8(pixels))
img.save("images/kmeans.jpg")"""